-- SCHEMA: teste

-- DROP SCHEMA teste ;

CREATE SCHEMA teste
    AUTHORIZATION postgres;

COMMENT ON SCHEMA teste
    IS 'teste';
	
CREATE OR REPLACE FUNCTION salario_mes_medico(crmm INTEGER,mes INTEGER, ano INTEGER) RETURNS INTEGER
language plpgsql AS 
$$
	DECLARE
		 salariomes INTEGER;
		 idcidade_medico INTEGER;
		 total_partos INTEGER;
		 total_partoslonge INTEGER;
	BEGIN
		IF NOT EXISTS(SELECT medico.crm FROM medico WHERE medico.crm=crmm)THEN
				RAISE EXCEPTION 'Medico não encontrado';
		END IF;
		IF EXISTS(SELECT medico.status FROM medico WHERE medico.status=0 AND medico.crm=crmm) THEN
				RAISE EXCEPTION 'Medico indisponível';
		END IF;
	
	
		salariomes:=(SELECT medico.salario FROM medico WHERE medico.crm=crmm);
		 
		idcidade_medico:=(SELECT medico.id_cidade FROM medico WHERE medico.crm=crmm);
		total_partoslonge= (SELECT COUNT (crm_medico) FROM nascimento
				INNER JOIN mae on nascimento.id_mae=mae.id  INNER JOIN  medico on medico.crm=nascimento.crm_medico WHERE medico.id_cidade!=mae.id_cidade AND
							nascimento.crm_medico=crmm AND EXTRACT(YEAR FROM nascimento.data_nascimento)=ano AND EXTRACT(MONTH FROM nascimento.data_nascimento)=mes);

		
		
		total_partos= (SELECT COUNT(crm_medico) FROM nascimento WHERE nascimento.crm_medico=crmm AND EXTRACT(YEAR FROM nascimento.data_nascimento)=ano 
					   AND EXTRACT(MONTH FROM nascimento.data_nascimento)=mes );
		salariomes= salariomes+(4000*total_partos)+(500*total_partoslonge);
		return salariomes;
	
	END;

$$;

DROP FUNCTION salario_mes_medico;
SELECT  salario_mes_medico(3,3,2021);

SELECT * FROM nascimento
SELECT * FROM mae
SELECT * FROM medico
	
	
===========================================================================================

Crie uma função de gatilho que, ao inserir um registro na tabela
“nascimento”, valide se o médico está ativo. Caso estiver inativo lançar uma
mensagem de exceção: “médico inativo”.

CREATE OR REPLACE FUNCTION inserir_registro_nascimento() RETURNS TRIGGER AS 
$$
	DECLARE 
		med INT;
	BEGIN
		SELECT COUNT(*) INTO med FROM medico WHERE crm = NEW.crm_medico AND status = 1;
		IF med = 0 THEN
			RAISE EXCEPTION 'Médico indisponivel';
		END IF;
		RETURN NEW;
	END;
$$language plpgsql;

DROP FUNCTION inserir_registro_nascimento;

CREATE TRIGGER  inserir_registro_nascimento BEFORE INSERT ON nascimento FOR EACH ROW EXECUTE PROCEDURE inserir_registro_nascimento();

DROP TRIGGER inserir_registro_nascimento();

INSERT INTO nascimento(id_mae,crm_medico,nome,data_nascimento,peso,altura,sexo) VALUES (1,4,'lola','2021-03-22',1,1,1);

================================================================================

Crie uma função de gatilho que, ao desativar um médico, lance uma
exceção caso ele tenha realizado algum nascimento no mês: “médico possui
nascimentos recentes”.

CREATE OR REPLACE FUNCTION trigger_desativar_medico() RETURNS TRIGGER AS 
$$
	DECLARE 
		nasc INT;
	BEGIN
		SELECT COUNT(*) INTO nasc FROM nascimento WHERE nascimento.crm_medico= NEW.crm and EXTRACT(MONTH FROM nascimento.data_nascimento)=EXTRACT(MONTH FROM (SELECT current_date));
		IF nasc > 0 THEN
			RAISE EXCEPTION 'Médico possui nascimentos recentes';
		END IF;
		RETURN NEW;
	END;
$$language plpgsql;

CREATE TRIGGER trigger_desativar_medico BEFORE UPDATE ON medico FOR EACH ROW EXECUTE PROCEDURE trigger_desativar_medico();

UPDATE medico SET status = 0 WHERE crm = 2;


SELECT WEEKDAY(current_date);
EXTRACT(MONTH FROM (SELECT current_weekday)) EXTRACT(MONTH FROM (SELECT current_date))

===============================================================================

 Crie uma função de gatilho para não permitir a diminuição ou o
aumento superior a 50% dos salários dos médicos. Lance uma mensagem de
exceção para cada verificação.

CREATE OR REPLACE FUNCTION ver_salario() RETURNS TRIGGER AS
$$
	DECLARE
		salario_trigger INT;
		metade_salario_trigger INT;
		salario_maior_trigger INT;
		salario_menor_trigger INT;
	BEGIN
		SELECT medico.salario INTO salario_trigger FROM medico WHERE medico.crm= NEW.crm;
		metade_salario_trigger:=(salario_trigger/2);
		salario_maior_trigger= (salario_trigger+metade_salario_trigger);
		salario_menor_trigger= (salario_trigger-metade_salario_trigger);
		
		IF salario_maior_trigger < NEW.salario THEN
			RAISE EXCEPTION 'Aumento maior que 50';
		END IF;
		IF salario_menor_trigger > NEW.salario THEN
			RAISE EXCEPTION 'Aumento menor que 50';
		END IF;
		RETURN NEW;
	END;

$$language plpgsql;

CREATE TRIGGER ver_salario BEFORE UPDATE ON medico FOR EACH ROW EXECUTE PROCEDURE ver_salario();

UPDATE medico SET salario = 1667 WHERE crm = 2; 

SELECT * FROM medico;


===============================================================================

 Crie uma função de gatilho para não permitir valor zerado ou nulo nas
colunas nome, data_nascimento, peso, altura e sexo da tabela “nascimento”, ao
atualizar um registro. Deve-se lançar uma exceção customizada para cada coluna.

CREATE OR REPLACE FUNCTION verifica_valor() RETURNS TRIGGER AS
$$
	BEGIN
		IF NEW.nome = '' THEN
			RAISE EXCEPTION 'Nome invalido';
		END IF;
		IF NEW.data_nascimento = NULL THEN
			RAISE EXCEPTION 'Data invalida';
		END IF;
		IF NEW.peso = 0 THEN
			RAISE EXCEPTION 'peso invalido';
		END IF;
		IF NEW.altura = 0 THEN
			RAISE EXCEPTION 'Altura invalida';
		END IF;
		IF NEW.sexo = 0 THEN
			RAISE EXCEPTION 'Sexo invalido';
		END IF;
		RETURN NEW;
	END;
$$language plpgsql;

CREATE TRIGGER verifica_valor AFTER UPDATE OF nome,data_nascimento,peso,altura,sexo ON nascimento FOR EACH ROW EXECUTE PROCEDURE verifica_valor();

UPDATE nascimento SET peso=0 WHERE id=1;

SELECT * FROM nascimento;

===============================================================================

Crie uma função de gatilho para não permitir agendamentos fora do
expediente do hospital. Lance uma mensagem de exceção. Leve em
consideração as seguintes regras de negócio:
a. Expediente: 08:00 até 12:00; 13:30 até 17:30;
b. Não há expediente no sábado e no domingo;
Página 3
c. Não é permitido que um agendamento ultrapasse o horário do expediente
(exemplo: o agendamento que inicia às 11:50 e finaliza às 12:10 não é válido).

CREATE OR REPLACE FUNCTION salario_mes_medico() RETURNS TRIGGER AS

$$
	DECLARE
		 novo_inicio_hora INTEGER;
		 novo_inicio_minuto INTEGER;
		 novo_fim_hora INTEGER;
		 novo_fim_minuto INTEGER;
		 expediente_inicio_hora INTEGER;
		 expediente_inicio_minuto INTEGER;
		 expediente_fim_hora INTEGER;
		 expediente_fim_minuto INTEGER;
	BEGIN
		expediente_inicio_hora=8;
		expediente_inicio_minuto=0;
		expediente_fim_hora=12;
		expediente_fim_minuto=0;
		
		IF EXTRACT(DOW FROM new.inicio)=6 OR EXTRACT(DOW FROM new.inicio)=0 THEN
			RAISE EXCEPTION 'data invalida';
			END IF;
		
		
		
		IF EXTRACT(HOUR FROM new.inicio)>EXTRACT(HOUR FROM new.fim) THEN
			RAISE EXCEPTION 'HORA INVALIDA1';
			END IF;

		
	
		
		
		
		
		IF EXTRACT(HOUR FROM new.fim)<expediente_fim_hora THEN
		
			IF EXTRACT(HOUR FROM new.fim)<expediente_fim_hora THEN
				IF EXTRACT(HOUR FROM new.inicio)<expediente_inicio_hora THEN
					RAISE EXCEPTION 'HORA INVALIDA2';
				
				ELSIF EXTRACT(HOUR FROM new.inicio)=expediente_inicio_hora AND EXTRACT(MINUTE FROM new.inicio)<expediente_inicio_minuto  THEN
					RAISE EXCEPTION 'MINUTO INVALIDO1';
				END IF;				
		
			ELSIF EXTRACT (HOUR FROM new.fim)=expediente_fim_hora AND EXTRACT(MINUTE FROM new.fim)<=expediente_fim_minuto THEN
				IF EXTRACT(HOUR FROM new.inicio)<expediente_inicio_hora THEN
					RAISE EXCEPTION 'HORA INVALIDA3';
				
				ELSIF EXTRACT(HOUR FROM new.inicio)=expediente_inicio_hora AND EXTRACT(MINUTE FROM new.inicio)<expediente_inicio_minuto  THEN
					RAISE EXCEPTION 'MINUTO INVALIDO2';
				END IF;	
			ELSIF EXTRACT (HOUR FROM new.fim)>=expediente_fim_hora AND EXTRACT(MINUTE FROM new.fim)>expediente_fim_minuto THEN
					RAISE EXCEPTION 'FORA DE EXPEDIENTE1';
			
			END IF;
			
		
		
			
		ELSE
		
		expediente_inicio_hora=13;
		expediente_inicio_minuto=30;
		expediente_fim_hora=17;
		expediente_fim_minuto=30;
		
		
			IF EXTRACT(HOUR FROM new.fim)<expediente_fim_hora THEN
				IF EXTRACT(HOUR FROM new.inicio)<expediente_inicio_hora THEN
					RAISE EXCEPTION 'HORA INVALIDA4';
				
				ELSIF EXTRACT(HOUR FROM new.inicio)=expediente_inicio_hora AND EXTRACT(MINUTE FROM new.inicio)<expediente_inicio_minuto  THEN
					RAISE EXCEPTION 'MINUTO INVALIDOO3';
				END IF;				
		
			ELSIF EXTRACT (HOUR FROM new.fim)=expediente_fim_hora AND EXTRACT(MINUTE FROM new.fim)<=expediente_fim_minuto THEN
				IF EXTRACT(HOUR FROM new.inicio)<expediente_inicio_hora THEN
					RAISE EXCEPTION 'HORA INVALIDA5';
				
				ELSIF EXTRACT(HOUR FROM new.inicio)=expediente_inicio_hora AND EXTRACT(MINUTE FROM new.inicio)<expediente_inicio_minuto  THEN
					RAISE EXCEPTION 'MINUTO INVALIDO4';
				END IF;	
			ELSIF EXTRACT (HOUR FROM new.fim)>=expediente_fim_hora AND EXTRACT(MINUTE FROM new.fim)>expediente_fim_minuto THEN
					RAISE EXCEPTION 'FORA DE EXPEDIENTE3';
			END IF;
		
		
		
		END IF;
		
		
		
		
		RETURN NEW;	
	END;

$$
language plpgsql;

CREATE TRIGGER  salario_mes_medico BEFORE INSERT ON agendamento FOR EACH ROW EXECUTE PROCEDURE salario_mes_medico();

INSERT INTO agendamento (id_nascimento,inicio,fim) VALUES ('1','2021-03-29 09:30:00-00','2021-03-29 10:00:00-00');

DROP FUNCTION salario_mes_medico;
SELECT  salario_mes_medico();




