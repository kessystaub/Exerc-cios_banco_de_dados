-- SCHEMA: teste

-- DROP SCHEMA teste ;

CREATE SCHEMA teste
    AUTHORIZATION postgres;

COMMENT ON SCHEMA teste
    IS 'teste';
	
CREATE or replace function retorna_nascimento (mes INTEGER, ano INTEGER)
RETURNS SETOF RECORD AS
$$	
	SELECT COUNT (crm_medico),medico.nome FROM nascimento INNER JOIN medico on nascimento.crm_medico = medico.crm WHERE EXTRACT(YEAR FROM nascimento.data_nascimento) = ano AND EXTRACT(MONTH FROM nascimento.data_nascimento) = mes GROUP BY medico.nome ORDER BY COUNT(crm_medico)DESC,medico.nome;
$$
LANGUAGE sql;

 SELECT retorna_nascimento(03,2021);
 
====================================================================================

Crie um procedimento armazenado, utilizando a linguagem SQL, que
receba por parâmetro a UF, e retorne a média de idade das mães. Considerar a
data de nascimento do bebê

CREATE OR REPLACE function retorna_media_maes(uf_estado VARCHAR)
RETURNS SETOF RECORD AS
$$	
		SELECT AVG(EXTRACT(YEAR FROM nascimento.data_nascimento)-EXTRACT(YEAR FROM mae.data_nascimento))FROM(((mae
			INNER JOIN estado ON estado.id=cidade.id_estado)
			INNER JOIN cidade ON mae.id_cidade=cidade.id)
			INNER JOIN nascimento ON mae.id = nascimento.id_mae)
			WHERE estado.uf = uf_estado;  
$$
LANGUAGE sql;

SELECT retorna_media_maes('SC');

===========================================================================================

Crie um procedimento armazenado, utilizando a linguagem SQL, que
receba por parâmetro o id do médico, e retorne a quantidade de bebês do sexo
masculino e a quantidade de bebês do sexo feminino.


CREATE OR REPLACE FUNCTION calcular_quantidade_bebes(crmmedico integer)
RETURNS SETOF RECORD AS
$$
		SELECT COUNT (nascimento.sexo), nascimento.sexo from nascimento where nascimento.crm_medico=crmmedico AND sexo=1 GROUP BY nascimento.sexo UNION SELECT COUNT (nascimento.sexo),nascimento.sexo from nascimento where nascimento.crm_medico=crmmedico AND sexo=0 GROUP BY nascimento.sexo;
$$
LANGUAGE sql;

SELECT calcular_quantidade_bebes(3);

==================================================================================================

Crie um procedimento armazenado, utilizando a linguagem PL/pgSQL,
que receba por parâmetro os dados do bebê, e insira um registro na tabela
“nascimento”. Faça uma validação, antes de inserir, para lançar uma exceção
caso o id da mãe não exista; e caso o id do médico informado não exista ou esteja
inativo.


CREATE OR REPLACE PROCEDURE insere_registro(idmae INTEGER, crmmedico INTEGER, nome_bebe VARCHAR, datanascimento DATE, peso_bebe DECIMAL, altura_bebe INTEGER, sexo_bebe INTEGER)
LANGUAGE plpgsql AS 
$$
	BEGIN
		IF NOT EXISTS(SELECT mae.id from mae WHERE mae.id=idmae) THEN
				RAISE EXCEPTION 'Mãe não encontrada';
		END IF;
		IF NOT EXISTS(SELECT medico.crm FROM medico WHERE medico.crm=crmmedico)THEN
				RAISE EXCEPTION 'Medico não encontrado';
		END IF;
		IF EXISTS(SELECT medico.status FROM medico WHERE medico.status=0 AND medico.crm=crmmedico) THEN
				RAISE EXCEPTION 'Medico indisponível';
		END IF;
		INSERT INTO nascimento(id_mae,crm_medico,nome,data_nascimento,peso,altura,sexo) VALUES (idmae,crmmedico,nome_bebe,datanascimento,peso_bebe,altura_bebe,sexo_bebe);
	END;
$$;

DROP PROCEDURE insere_registro;

CALL insere_registro(2,3,'jujuzinha',DATE('2021-03-22'),3,1,1);
SELECT * FROM nascimento;


DROP PROCEDURE insere_registro;

INSERT INTO medico (id_especialidade, id_cidade, nome, logradouro, numero, bairro, cep, celular, fixo, salario, status) VALUES (1,1,'fernanda','rua tal','324','bairro nao sei','289034','534897','748578','2378',0);
SELECT * FROM medico;

==============================================================================================================
(2 pontos) Crie um procedimento armazenado, utilizando a linguagem PL/pgSQL,
que receba por parâmetro o código do médico, o mês (inteiro) e o ano (inteiro), e
retorne o valor do salário líquido. O salário do médico é composto pelo salário fixo
do médico mais R$ 4.000,00 por nascimento realizado no período. Caso o
nascimento tenha sido em uma cidade (considerar a cidade da mãe) diferente da
cidade que o médico mora, há um custo de R$ 500,00 de descolamento por
nascimento. Faça uma validação para lançar uma exceção caso o código do
médico informado não exista ou esteja inativo.





CREATE OR REPLACE FUNCTION salario_mes_medico(crmm INTEGER,mes INTEGER, ANO INTEGER) RETURNS INTEGER
language plpgsql AS 
$$
	DECLARE
		 salariomes INTEGER;
		 idcidade_medico INTEGER;
	BEGIN
		salariomes:=(SELECT medico.salario FROM medico WHERE medico.crm=crmm);
		IF 
		

		
		return salariomes;
	
	END;

$$;

DROP PROCEDURE salario_mes_medico;
SELECT salario_mes_medico(1,3,4);









